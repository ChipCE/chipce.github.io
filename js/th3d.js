var CONFIG_HEADER = '//Generated by EZconfig tool v1.0b\n#pragma once\n#define CONFIGURATION_H_VERSION 020000\n';
var CONFIG_FOOTER = '#include "Configuration_backend.h"\n#define UNIFIED_VERSION "TH3D U2.R1.B3"\n';

// Onload
$( document ).ready(function() {
    // Show sub config when main config status changed
    $( ".config-option" ).change(function(event) {
        // select
        if($( event.delegateTarget ).prop("type") == "select-one")
        {
            let targetValue = $( event.delegateTarget ).val();
            console.log("search for " + targetValue)
            // first, hide all sub option
            $('.config-option-warpper-sub[parent="' + $( event.delegateTarget ).prop('id') + '"]').addClass("d-none");
            // then show the matched target only
            // $('.config-option-warpper-sub[parent="' + $( event.delegateTarget ).prop('id') + '"][targetValue="' + targetValue + '"]').removeClass("d-none");
            let subConfigList = $('.config-option-warpper-sub[parent="' + $( event.delegateTarget ).prop('id') + '"]');
            $(subConfigList.get()).each(function () {
                if(matchedTargetValue(targetValue,$(this).attr('targetValue')))
                    $(this).removeClass("d-none");
            });

        }
        //check box
        else if($( event.delegateTarget ).prop("type") == "checkbox")
        {
            let targetValue = $( event.delegateTarget ).prop('checked');
            $('.config-option-warpper-sub[parent="' + $( event.delegateTarget ).prop('id') + '"]').addClass("d-none");
            $('.config-option-warpper-sub[parent="' + $( event.delegateTarget ).prop('id') + '"][targetValue="' + targetValue + '"]').removeClass("d-none");
        }
    });

    $( ".config-option-sub" ).change(function(event) {
        // select
        if($( event.delegateTarget ).prop("type") == "select-one")
        {
            let targetValue = $( event.delegateTarget ).val();
            console.log("search for " + targetValue)
            // first, hide all sub option
            $('.config-option-warpper-sub[parent="' + $( event.delegateTarget ).prop('id') + '"]').addClass("d-none");
            // then show the matched target only
            // $('.config-option-warpper-sub[parent="' + $( event.delegateTarget ).prop('id') + '"][targetValue="' + targetValue + '"]').removeClass("d-none");
            let subConfigList = $('.config-option-warpper-sub[parent="' + $( event.delegateTarget ).prop('id') + '"]');
            $(subConfigList.get()).each(function () {
                if(matchedTargetValue(targetValue,$(this).attr('targetValue')))
                    $(this).removeClass("d-none");
            });

        }
        //check box
        else if($( event.delegateTarget ).prop("type") == "checkbox")
        {
            let targetValue = $( event.delegateTarget ).prop('checked');
            $('.config-option-warpper-sub[parent="' + $( event.delegateTarget ).prop('id') + '"]').addClass("d-none");
            $('.config-option-warpper-sub[parent="' + $( event.delegateTarget ).prop('id') + '"][targetValue="' + targetValue + '"]').removeClass("d-none");
        }
    });

    reloadTarget();
   
});

function onProgressButtonClicked(ele)
{
    let selectedStep = $(ele).attr( 'step' );

    $(".bs-wizard-step").addClass("disabled");
    $(".bs-wizard-step").removeClass("active");
    $(".bs-wizard-step").removeClass("complete");

    $(".configStep").addClass("d-none");
    $("#config-step-" + selectedStep).removeClass("d-none");


    $(ele).removeClass("disabled");
    $(ele).addClass("complete");

    if(selectedStep == 7)
        generateConfig();
}

function switchToStep(step)
{
    $(".bs-wizard-step").addClass("disabled");
    $(".bs-wizard-step").removeClass("active");
    $(".bs-wizard-step").removeClass("complete");

    // show config  step gropup
    $(".configStep").addClass("d-none");
    $("#config-step-" + step).removeClass("d-none");
    
    // set current step progress to active
    $("#progress-bar-" + step).removeClass("disabled");
    $("#progress-bar-" + step).addClass("complete");

    if(step == 7)
        generateConfig();
    
    $("html, body").animate({ scrollTop: 0 }, 500);
}


function prevButtonHandle(ele){
    let currentStep = $(ele).closest('.configStep').attr("step");
    if (currentStep > 1)
        switchToStep(parseInt(currentStep)-1);
}

function nextButtonHandle(ele)
{
    let currentStep = $(ele).closest('.configStep').attr("step");
    if (currentStep < 7)
        switchToStep(parseInt(currentStep)+1);
}

function generateConfig()
{
    getConfigStr();
    return false;
}

function matchedTargetValue(targetValue,targetValueList)
{
    return targetValueList.split(",").includes(targetValue);
}

function getSubConfigArg(parentId,targetValue)
{
    let subConfigStr = "";
    // console.log("sub");
    // subConfigList = $('.config-option-warpper-sub[parent="' + parentId + '"][targetValue="' + targetValue + '"]').find(".config-option-sub");
    subConfigList = $('.config-option-warpper-sub[parent="' + parentId + '"]');
    console.log(subConfigList);
    $(subConfigList.get()).each(function () {
        console.log($(this).attr('targetValue'));
        if(matchedTargetValue(targetValue,$(this).attr('targetValue')))
        {
            let subConfig = $(this).find(".config-option-sub");
            if (subConfig.prop('type') == "select-one")
            {
                if($(subConfig).val() != "NONE")
                {
                    //configStr = configStr + "#define " + $(this).prop("id") + " " + $(this).val() + "\n";

                    if($(subConfig).attr("appendId")=="true")
                        subConfigStr = subConfigStr + "#define " + $(subConfig).prop("id") + " " + $(subConfig).val() + "\n";
                    else
                        subConfigStr = subConfigStr + "#define " + $(subConfig).val() + "\n";
                    // also check if subconfig have sub ...
                    if($(subConfig).attr("hasChild")=="true")
                        subConfigStr = subConfigStr + getSubConfigArg($(subConfig).prop("id"),$(subConfig).val());
                }
            }
            else if ($(subConfig).prop('type') == "checkbox")
            {
                if ($(subConfig).prop('checked'))
                {
                    subConfigStr = subConfigStr + "#define " + $(subConfig).prop("id") + "\n";
                    // also check if subconfig have sub ...
                    if($(subConfig).attr("hasChild")=="true")
                        subConfigStr = subConfigStr + getSubConfigArg($(subConfig).prop("id"),$(subConfig).val());
                }
            }
            else if ($(subConfig).prop('type') == "number")
            {
                if ( $(subConfig).val() != "")
                {
                    subConfigStr = subConfigStr + "#define " + $(subConfig).prop("id") + " " + $(subConfig).val() + "\n";
                }
            }
            else if ($(subConfig).prop('type') == "text")
            {
                if ( $(subConfig).val() != "")
                {
                    if ( $(subConfig).attr("forceMacro") == "true")
                        subConfigStr = subConfigStr + "#define " + $(subConfig).prop("id") + " " + $(subConfig).val() + "\n";
                    else
                        subConfigStr = subConfigStr + '#define ' + $(subConfig).prop("id") + ' "' + $(subConfig).val() + '"\n';
                }
            }

            
        }
    });
    // console.log(subConfigStr);
    return subConfigStr;

}

function submitButtonHandle()
{
    console.log(getConfigStr());
}

function getConfigStr()
{
    let configStr = "";
    let wrapperList = $(".config-option");
    $(wrapperList.get()).each(function () {
        if ($(this).prop('type') == "select-one")
        {
            if($(this).val() != "NONE")
            {
                if($(this).attr("appendId")=="true")
                    configStr = configStr + "#define " + $(this).prop("id") + " " + $(this).val() + "\n";
                else
                    configStr = configStr + "#define " + $(this).val() + "\n";

                // also search for its sub 
                let subConfigStr = getSubConfigArg($(this).prop("id"),$(this).val());
                if(subConfigStr != "")
                configStr = configStr + subConfigStr;
            }
        }
        else if ($(this).prop('type') == "checkbox")
        {
            if ($(this).prop('checked'))
            {
                configStr = configStr + "#define " + $(this).prop("id") + "\n";
                // also search for its sub 
                let subConfigStr = getSubConfigArg($(this).prop("id"),"true");
                if(subConfigStr != "")
                    configStr = configStr + subConfigStr;
            }
        }
        else if ($(this).prop('type') == "number")
        {
            if ( $(this).val() != "")
            {
                configStr = configStr + "#define " + $(this).prop("id") + " " + $(this).val() + "\n";
            }
            // no sub config support for this form type
        }
        else if ($(this).prop('type') == "text")
        {
            if ( $(this).val() != "")
            {
                if ( $(this).attr("forceMacro") == "true")
                    configStr = configStr + "#define " + $(this).prop("id") + " " + $(this).val() + "\n";
                else
                    configStr = configStr + '#define ' + $(this).prop('id') + ' "' + $(this).val() + '"\n';
            }
            // no sub config support for this form type
        }
    });

    console.log(configStr);
    configStr = applyCompatibilityLayer(configStr);
    $("#config").text(CONFIG_HEADER + configStr + CONFIG_FOOTER);
    return configStr;
}

function checkInputError()
{
    return false;
}

//Custom funtion to convert some value that not match any generic partent
function applyCompatibilityLayer(configStr)
{
    let configArr = configStr.split("\n");
    
    // 1.Convert X_PROBE_OFFSET_FROM_EXTRUDER and Y_PROBE_OFFSET_FROM_EXTRUDER to NOZZLE_TO_PROBE_OFFSET{x,y,z}
        //#define NOZZLE_TO_PROBE_OFFSET {12,13,0}
        //X_PROBE_OFFSET_FROM_EXTRUDER
        //Y_PROBE_OFFSET_FROM_EXTRUDER
    let xOffset = 0;
    let yOffset = 0;

    for(let i = 0;i< configArr.length; i++)
    {
        if(configArr[i].includes("#define X_PROBE_OFFSET_FROM_EXTRUDER"))
        {
            xOffset = configArr[i].replace("#define X_PROBE_OFFSET_FROM_EXTRUDER ","");
            console.log("x-offset="+xOffset);
            configArr[i] = "//" + configArr[i];
        }
        if(configArr[i].includes("#define Y_PROBE_OFFSET_FROM_EXTRUDER"))
        {
            yOffset = configArr[i].replace("#define Y_PROBE_OFFSET_FROM_EXTRUDER ","");
            console.log("y-offset="+yOffset);
            configArr[i] = "//" + configArr[i];
        }
    }
    // Only define NOZZLE_TO_PROBE_OFFSET when CUSTOM_PROBE is selected
    if(configStr.includes("#define CUSTOM_PROBE"))
    {
        let offsetStr = "#define NOZZLE_TO_PROBE_OFFSET {" + xOffset + "," + yOffset + ",0}";
        configArr.push(offsetStr);
    }

    //re-construct configStr
    let newConfigStr = "";
    for(let i = 0;i< configArr.length; i++)
        if(!configArr[i].includes("//") && configArr[i] != "" && configArr[i] != "\n")
            newConfigStr = newConfigStr + configArr[i] + "\n";
    return newConfigStr;
}

//show sub menu based on default target
function reloadTarget()
{
    let wrapperList = $(".config-option");
    $(wrapperList.get()).each(function () {
        if ($(this).prop('type') == "select-one")
            $(this).val($(this).val()).change();
        else if ($(this).prop('type') == "checkbox")
        {
            if ($(this).prop('checked'))
            {
                $(this).attr('checked', 'checked').change();
            }
        }
    });
}